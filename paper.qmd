---
title: "Filling in data gaps on refugee children: Statistical imputation for missing count data"
author: Jan Beise, Yukun Pei (UNICEF); Sebastian Steinmueller (UNHCR)
format: pdf
execute:
  echo: false
---

## Dataset

```{r}
#| include: false
#| 
##### I. Read data, packages etc ##### 

### packages
library(tidyverse)
library(stringi)
library(gt)
library(ggplot2)
library(patchwork)
library(scales)
library(ggdist)
library(tidybayes)
library(brms)
library(equatiomatic)

### read datasets
load("data/dem_refvda_end2021.RData")
imputations <- readRDS("output/imputations2_20230110_1.rds")

### read brms fit objects
m.fm <- readRDS("models/m.fm2_20230106.rds")
m.age <- readRDS("models/m.age2_20230108.rds")

## colours (https://intranet.unhcr.org/content/dam/unhcr/intranet/staff%20support/strategic/documents/english/brand-book/UNHCR-Brand%20Book.pdf)
unhcrPaletteBlue <- c("#0072BC", "#338EC9", "#66AAD7", "#99C7E4", "#CCE3F2")
unhcrPaletteBlack <- c("#000000", "#333333", "#666666", "#999999", "#CCCCCC")
unhcrPaletteYellow <- c("#FAEB00", "#FBEF33", "#FCF366", "#FDF799", "#FEFBCC")
unhcrPaletteWhite <- c("#FFFFFF")
unhcrPaletteRed <- c("#E73451")
unhcrPaletteGreen <- c("#00AB92")

```

UNHCR compiles official statistics on stocks and flows of forcibly displaced and stateless persons twice a year, once for mid-year figures (Mid-Year Statistical Reporting, MYSR) and once for end-year figures (Annual Statistical Reporting, ASR). For these reporting exercises, UNHCR's country offices compile aggregate population figures for refugees and asylum-seekers hosted in their country from a range of sources and data producers such as governments, UNHCR's own refugee registration database proGres and sometimes non-governmental actors. The geographic level on which theses statistics are being produced is therefore always the country country of asylum. The figures undergo a statistical quality control process at the country, regional and global level of the organisation and are disseminated on the publicly available refugee data finder (https://www.unhcr.org/refugee-statistics/) after applying statistical disclosure control to suppress very small counts of persons that could identify individuals. The models and results presented in this paper use data only on the end-year stock of refugees under UNHCR's mandate (including Venezuelans displaced abroad, excluding Palestine refugees under UNRWA's mandate), that is, not on asylum-seekers, internally displaced persons and stateless persons. 

The end-year figures compiled with reporting date 31 December contain sex- and age breakdowns of the stocks refugees under UNHCR's mandate. The data is available by country of origin and country of asylum. The variables \[sex\]\_\[agebracket\] contain the counts of refugees as of 31 December 2021 in the individual sex and age brackets in the respective geographic/stateless combination. For example, *female_12_17* contains the number of female refugees aged 12 to 17. Variable *total* is the total number of refugees over all sex/age categories.

Pre-defined sex-specific age brackets are 0-4, 5-11, 12-17, 18-59 and 60 years and older. For some origin/asylum combinations, only sex-disaggregated data without age information is available, and finally there are population groups for which only the total end-year count without any demographic information is available. These different levels of disaggregated data availability is recorded in variable *missing* in the dataset: "none" for populations for whom age- and sex disaggregation is available, "age" where only counts of female and male refugees are available without age information and "sexAge" for populations without any available demographic information. @tbl-data displays six rows of this dataset for illustration (age brackets other than 18-59 not shown for better readability).

```{r, message=FALSE, warning=FALSE}
#| label: tbl-data
#| tbl-cap: UNHCR end-2021 data
#| warning: false
#| error: false
#| echo: false
#| message: false
set.seed(1840)
dem_longMissing %>% 
  filter(total > 500) %>%
  select(origin_country, asylum_country, missing, female_18_59, female, male_18_59, male, total) %>% 
  group_by(missing) %>%
  slice_sample(n = 2) %>%
  ungroup %>%
  gt() %>% 
  tab_options(table.font.size = "40%")
```

```{r, message=FALSE, warning=FALSE}
t.missing.asyregion <- dem_longMissing %>% 
  group_by(asylum_region, missingAge) %>% 
  summarise(total = sum(total),
            nOrigin = n_distinct(origin_country)) %>% 
  mutate(freq.totalEndYear = total/sum(total),
         freq.origin = nOrigin / sum(nOrigin)) %>%
  ungroup()

```

Since reporting of official figures is undertaken at the level of the country of asylum, the reasons for missingness of age- and sex-disaggregated data in UNHCR's official statistics are located in the country - be it UNHCR's or government offices - in which refugees are hosted. This might in many countries be a lack of priority or technical capacity to produce such disaggregated figures, or in some instances unwillingness to share detailed data. 

@fig-missingAsy shows for what proportion of the refugee population living in each region age-disaggregated data was available at the end of 2021. While demographic coverage is close to universal for refugees hosted in Africa, it is available for `r round(as.numeric( t.missing.asyregion |> filter(asylum_region == "Europe", missingAge=="Age not missing") |>select(freq.totalEndYear) )*100)` per cent of refugees in Europe, `r round(as.numeric( t.missing.asyregion |> filter(asylum_region == "Asia", missingAge=="Age not missing") |>select(freq.totalEndYear) )*100)` per cent in Asia and only for `r round(as.numeric( t.missing.asyregion |> filter(asylum_region == "Americas", missingAge=="Age not missing") |>select(freq.totalEndYear) )*100)` per cent in the Americas. This is to a large extent a result of the differing population data sources in these regions: While the individual demographic details of refugees in many countries in Africa and MENA are recorded in UNHCRâ€™s own case registration system proGres, population data in other regions often comes from government offices with varying degrees of availability of demographic data.

```{r, message=FALSE, warning=FALSE, out.width="80%", out.height="160%"}
#| label: fig-missingAsy
#| fig-cap: Missingness by region of asylum
#| warning: false
#| error: false
#| echo: false
#| message: false



p.asyregion.missing <- ggplot(data = t.missing.asyregion %>% 
                                                   filter(!is.na(asylum_region)),
                                                 aes(x = `missingAge`, 
                                                     y = freq.totalEndYear*100,
                                                     fill = `missingAge`)) +
  geom_bar( stat="identity") +
  scale_fill_manual(values=c(unhcrPaletteBlack[1], unhcrPaletteBlue[4])) +
  facet_wrap(~  `asylum_region`, ncol = 1, scales = "fixed") +
  theme_minimal() +
  theme(axis.text.y = element_blank(),
        axis.text.x = element_text(size = 13),
    #    plot.title = element_text(hjust = 0.5),
        axis.title.y = element_blank(),
        axis.title.x = element_text(size = 13)) +
     #   panel.grid.major.x = element_blank()) +
    theme(legend.title = element_blank(), legend.position = "bottom") +
    coord_flip() 

p.asyregion.missing
```


```{r}
##### II. Plot hierarchies and covariates ##### 

# Calculate the proportions of children and girls/women
dem_longMissing <- dem_longMissing %>%
  # group_by(asylum_iso3) %>% # begin remove from here to next remove marker once change made in preparedata.R
  #  mutate(distanceAsyMeanW = weighted.mean(distance, w=total, na.rm=T)
  #       ) %>% 
  # ungroup() %>% 
  #  mutate(distance = case_when(
  #          distance == 0 ~ distanceAsyMeanW,
  #          !(distance == 0 ) ~ distance
  #         )
  #       ) %>% 
  # mutate(gniRatio = gni_asylum/gni_origin,
  #        logGniRatio = log(gniRatio),
  #        logDistance = log(distance)
  #       ) %>% 
  #   mutate(children = rowSums(select(., female_0_4, female_5_11, female_12_17,
  #                           male_0_4, male_5_11, male_12_17)),
  #        adults = rowSums(select(., female_18_59, female_60,
  #                           male_18_59, male_60))
  #   ) %>%
  # end remove
  mutate(childrenProp = children/total,
         femaleProp = female/total,
         missingAge = case_when(
              missing == "none" ~ "Age not missing",
              missing != "none" ~ "Age missing" 
            )
         )

### plot covariates against proportions of children and female

# Get the 9 largest origin_iso3 by total
top9_origin_iso3 <- dem_longMissing %>%
  group_by(origin_iso3) %>%
  summarize(total = sum(total)) %>%
  arrange(desc(total)) %>%
  top_n(9)


top4_origin_iso3 <- top9_origin_iso3 %>%
  top_n(4)


### origin / asylum plots ### 

## children
dem_longMissing_geoplots <- dem_longMissing %>% 
  filter(origin_iso3 %in% top4_origin_iso3$origin_iso3, missing == "none", total >=500)


p.top4.children.ori.asy <-  ggplot(data = dem_longMissing_geoplots,
       aes(x = origin_country, y = childrenProp, colour = asylum_region)) +
  geom_point(shape = 19, aes(size = total, alpha = 0.3)) +  # Add points to the plot
  scale_color_manual(values = c(unhcrPaletteBlue[3], unhcrPaletteGreen[1], unhcrPaletteRed[1], unhcrPaletteBlack[1])) +
  scale_size(guide = "none") +
  scale_alpha(guide = "none")



### covariate plots ### 

dem_longMissing_plots <- dem_longMissing %>% 
  filter(origin_iso3 %in% top9_origin_iso3$origin_iso3, missing == "none", total >=50)


## gni
p.children.gni <- ggplot(data = dem_longMissing_plots,
       aes(x = gni_diff, y = childrenProp, colour = neighbor)) +
  geom_point(shape = 19, aes(size = total, alpha = 0.3)) +  # Add points to the plot
  scale_color_manual(values = c(unhcrPaletteBlue[3], unhcrPaletteBlack[1])) +
  facet_wrap(~ origin_country) + # Group the data by origin_iso3 
  scale_size(guide = "none") +
  scale_alpha(guide = "none")


p.female.gni <- ggplot(data = dem_longMissing_plots,
       aes(x = gni_diff, y = femaleProp, colour = neighbor)) +
  geom_point(shape = 19, aes(size = total, alpha = 0.3)) +  # Add points to the plot
  scale_color_manual(values = c(unhcrPaletteBlue[3], unhcrPaletteBlack[1])) +
  facet_wrap(~ origin_country) + # Group the data by origin_iso3
  scale_size(guide = "none") +
  scale_alpha(guide = "none")


p.children.loggni <- ggplot(data = dem_longMissing_plots,
       aes(x =logGniRatio, y = childrenProp, colour = neighbor)) +
  geom_point(shape = 19, aes(size = total, alpha = 0.3)) +  # Add points to the plot
  scale_color_manual(values = c(unhcrPaletteBlue[3], unhcrPaletteBlack[1])) +
  facet_wrap(~ origin_country) + # Group the data by origin_iso3 
  scale_size(guide = "none") +
  scale_alpha(guide = "none")


p.female.loggni <- ggplot(data = dem_longMissing_plots,
       aes(x = logGniRatio, y = femaleProp, colour = neighbor)) +
  geom_point(shape = 19, aes(size = total, alpha = 0.3)) +  # Add points to the plot
  scale_color_manual(values = c(unhcrPaletteBlue[3], unhcrPaletteBlack[1])) +
  facet_wrap(~ origin_country) + # Group the data by origin_iso3
  scale_size(guide = "none") +
  scale_alpha(guide = "none")

## distance

p.children.dist <- ggplot(data = dem_longMissing_plots,
       aes(x = distance, y = childrenProp, colour = neighbor)) +
  geom_point(shape = 19, aes(size = total, alpha = 0.3)) +  # Add points to the plot
  scale_color_manual(values = c(unhcrPaletteBlue[3], unhcrPaletteBlack[1])) +
  facet_wrap(~ origin_country, scales = "free_x") + # Group the data by origin_iso3
  scale_size(guide = "none") +
  scale_alpha(guide = "none")


p.female.dist <- ggplot(data = dem_longMissing_plots,
       aes(x = distance, y = femaleProp, colour = neighbor)) +
  geom_point(shape = 19, aes(size = total, alpha = 0.3)) +  # Add points to the plot
  scale_color_manual(values = c(unhcrPaletteBlue[3], unhcrPaletteBlack[1])) +
  facet_wrap(~ origin_country, scales = "free_x") + # Group the data by origin_iso3
  scale_size(guide = "none") +
  scale_alpha(guide = "none")


p.children.logdist <- ggplot(data = dem_longMissing_plots,
       aes(x = logDistance, y = childrenProp, colour = neighbor)) +
  geom_point(shape = 19, aes(size = total, alpha = 0.3)) +  # Add points to the plot
  scale_color_manual(values = c(unhcrPaletteBlue[3], unhcrPaletteBlack[1])) +
  facet_wrap(~ origin_country, scales = "free_x") + # Group the data by origin_iso3
  scale_size(guide = "none") +
  scale_alpha(guide = "none")


p.female.logdist <- ggplot(data = dem_longMissing_plots,
       aes(x = logDistance, y = femaleProp, colour = neighbor)) +
  geom_point(shape = 19, aes(size = total, alpha = 0.3)) +  # Add points to the plot
  scale_color_manual(values = c(unhcrPaletteBlue[3], unhcrPaletteBlack[1])) +
  facet_wrap(~ origin_country, scales = "free_x") + # Group the data by origin_iso3
  scale_size(guide = "none") +
  scale_alpha(guide = "none")


### plot missingness

# by origin region
t.oriregion.missingAge <- dem_longMissing %>% 
  group_by(missingAge,  origin_region) %>% 
  summarise(total = sum(total),
            children = sum(children),
            adults = sum(adults))


p.oriregion.missingAge1 <- ggplot(data = t.oriregion.missingAge %>%
                                   filter(origin_region!="Oceania", missingAge == "Age not missing") %>% 
                                    pivot_longer(cols = c(children, adults), names_to = "age", values_to = "value"),
                                                 aes(x = origin_region, 
                                                     y = value, 
                                                     fill = age)) +
  geom_bar(stat="identity") +
  scale_fill_manual(values=c(unhcrPaletteBlue[1], unhcrPaletteGreen[1])) +
  ggtitle("Age data available") +
  labs(y = "Number of refugees")  +
  ylim(c(NA,5000000)) +
  theme(legend.title = element_blank(), legend.position = "bottom") +
  theme_minimal() +
  theme(axis.text.x = element_text(size = 10, angle = 45),
        axis.text.y = element_text(size = 13),
        plot.title = element_text(hjust = 0.5),
        axis.title.x = element_blank(),
        axis.title.y = element_text(size = 13),
        panel.grid.major.x = element_blank()) 
  


p.oriregion.missingAge2 <- ggplot(data = t.oriregion.missingAge %>%
                                   filter(origin_region!="Oceania", missingAge == "Age missing") ,
                                                 aes(x = origin_region, 
                                                     y = total)) +
  geom_bar(stat = "identity", colour = unhcrPaletteBlue[1], fill = unhcrPaletteWhite[1], alpha = 0,
           size = 1.6)  +
  ggtitle("Age data missing") +
  labs(y = "Number of refugees")  +
  theme_minimal() +
  theme(axis.text.x = element_text(size = 10, angle = 45),
        axis.text.y = element_blank(),
        plot.title = element_text(hjust = 0.5),
        axis.title.x = element_blank(),
        axis.title.y = element_blank(),
        panel.grid.major.x = element_blank()) +
  scale_y_continuous(labels = label_number(scale_cut = cut_si("m")))
  

p.oriregion.missingAge <- p.oriregion.missingAge1  + p.oriregion.missingAge2+ plot_layout(guides = "collect") & theme(legend.position = "bottom", legend.title = element_blank(), legend.text = element_text(size=10))  &  scale_y_continuous(labels = label_number(scale_cut = cut_short_scale()), limits = c(NA,11000000)) & theme(title = )


# by asylum region
t.asyregion.missingAge <- dem_longMissing %>% 
  group_by(missingAge,  asylum_region) %>% 
  summarise(total = sum(total)) %>% 
  mutate(totalProp = total/sum(total))


p.asyregion.missingAge <- ggplot(data = t.asyregion.missingAge,
                                                 aes(x = asylum_region, 
                                                     y = totalProp*100)) +
  geom_bar( stat="identity", fill = unhcrPaletteBlue[1]) +
  facet_wrap(~  missingAge,  scales = "fixed")


# missingness 
# example data
t.missing <- dem_longMissing %>% 
  group_by(missing) %>%
  summarise(
    `Number of refugees` = sum(total),
    `Number of country pairs` = n()
  ) %>%
  mutate(`% of refugees` = round(`Number of refugees`/sum(`Number of refugees`)*100)) %>%
  ungroup() %>% 
    mutate(`Type of missingness` = case_when(
      missing == "none" ~ "i) None",
      missing == "age" ~ "ii) Age missing",
      missing == "sexAge" ~ "iii) Age and sex missing"
    )
  ) %>%
  select(`Type of missingness`, `Number of refugees`, `% of refugees`, `Number of country pairs`) %>%
  arrange(`Type of missingness`)

# t.missing %>%
#   gt() 



```

## Data gaps and need for modelling

UNHCR has in the past typically reported the sex/age breakdown in the available data as global and regional aggregates of the demographic distribution of all refugees. By reporting the observed demographic distribution as the sex/age structure of the entire refugee population including the part without available data, we are assuming that the `r t.missing[t.missing$"Type of missingness"=="iii) Age and sex missing",]$"% of refugees"` per cent for whom no age information was available at the end of 2021 have the same age distribution as the ones with available data. It is difficult to check this very strong assumption of ignorability of the missing data without further information on the sex/age distribution in the missing part of the data. We can however compare the distribution of other, fully available variables between refugees with and without demographic information. If such variables can be assumed to be correlated with the sex/age distribution at least to some extent, this can give us an indication whether the ignorability assumption is likely to be justified or not.

\
In particular, we can look at the distribution of data availability by country and region of asylum, and we can furthermore compare the distribution of origins of refugees in the observed and the unobserved part of the population. If missingness of demographic data was entirely random and thus ignorable, we would expect the geographic origins of refugees to be similar in the observed and the unobserved part of the demographic data, that is, we would see a similar distribution of origin countries.

```{r, message=FALSE, warning=FALSE, out.width="100%", out.height="120%"}
#| label: fig-missingOri
#| fig-cap: Missingness by origin region
#| warning: false
#| error: false
#| echo: false
#| message: false
p.oriregion.missingAge
```

@fig-missingOri shows the distribution of refugees by origin regions separately for the two subsets of the global refugee population with (left side) and without (right side) age-disaggregated data. The most common origin regions are Sub-Saharan Africa and the MENA region for refugees with available demographic information.Those without demographic data availability have most commonly fled from countries in the Americas and the Asia-Pacific region. The left part of the graph shows that in the available data, the proportion of children is lower in these two regions. This provides a first indication that refugees with available sex/age-disaggregated data are fundamentally different from those without such data, and that we cannot simply assume the same demographic distribution between these two groups.


```{r, message=FALSE, warning=FALSE, out.width="100%", out.height="120%"}
#| label: fig-childrenOriAsy
#| fig-cap: Proportion of children per country of asylum by country of origin
#| warning: false
#| error: false
#| echo: false
#| message: false
 p.top4.children.ori.asy
```


## Models

$$        $$

## Results

```{r}
##### check predictions ##### 

imputations <- imputations %>% 
  ungroup() %>%
  mutate(femaleProp = female/total,
         children = rowSums(select(., female_0_4, female_5_11, female_12_17, male_0_4, male_5_11, male_12_17))) %>% 
  mutate(childrenProp = children/total)


### by country of origin

## identify 3 large populations with missing age/sex data
t.dem.ageMissingTop9 <- dem_longMissing %>%
  ungroup() %>%
  filter(missing == "sexAge")%>%
  slice_max(total, n=9)
  
t.dem.ageMissingPlots <- dem_longMissing  %>% 
  filter(origin_iso3 == "VEN" & asylum_iso3 == "PER" & popType=="VDA" | origin_iso3 == "VNM" & asylum_iso3 == "CHN" |  origin_iso3 == "SYR" & asylum_iso3 == "SWE")

t.imp.ageMissingPlots <- imputations %>% 
  filter(origin_iso3 == "VEN" & asylum_iso3 == "PER" & popType=="VDA" | origin_iso3 == "VNM" & asylum_iso3 == "CHN" |  origin_iso3 == "SYR" & asylum_iso3 == "SWE")

# show for ifms
imputations.slides <- imputations %>% filter(imputation %in% c(1,2,3) & (origin_iso3 == "VEN" & asylum_iso3=="BOL" &popType == "VDA" | origin_iso3 == "SOM" & asylum_iso3=="UGA" | origin_iso3=="IDN" & asylum_iso3 == "PNG")) %>% arrange(origin_iso3, imputation) %>% select(imputation, origin_country, asylum_country, female_0_4:total)

#write.csv(imputations.slides, "ifms/imputations.slides.csv")

## Syria
# plot of uncertainty (full posterior distribution) 
# y: histogram
# x: proportion of female over imputations
# group: country of asylum

imputations.syr <- imputations %>% 
  filter(origin_iso3 == "SYR") 

dem.syr.select <- dem_longMissing %>% filter(origin_iso3=="SYR", asylum_iso3 %in% c("SWE", "USA",  "LBN", "JOR", "GBR"))

p.imputations.syr.female  <- ggplot(data = imputations.syr %>% filter(asylum_iso3 %in% c("SWE", "USA",    "LBN", "JOR", "GBR")),
      aes(y=reorder(asylum_country, femaleProp), x=femaleProp)) +
     stat_halfeye() +
  theme_minimal()


p.imputations.syr.reg.female <- ggplot(data = imputations.syr,
      aes(y=reorder(asylum_country, femaleProp), x=femaleProp)) +
     stat_gradientinterval() +
  facet_wrap(~ asylum_region, scales = "fixed")


p.imputations.syr.children <- ggplot(data = imputations.syr %>% filter(asylum_iso3 %in% c("SWE", "USA",    "LBN", "JOR", "GBR")),
      aes(y=reorder(asylum_country, childrenProp), x=childrenProp)) +
     stat_halfeye() +
  theme_minimal()

p.imputations.syr.reg.children <- ggplot(data = imputations.syr,
      aes(y=reorder(asylum_country, childrenProp), x=childrenProp)) +
     stat_gradientinterval() +
  facet_wrap(~ asylum_region, scales = "free")

p.imputations.syr.neighbour.children <- ggplot(data = imputations.syr,
      aes(y=reorder(asylum_country, childrenProp), x=childrenProp)) +
     stat_gradientinterval() +
  facet_wrap(~ neighbor, scales = "free")


### by region of asylum
t.dem.asyreg.children <- dem_longMissing %>% 
  filter(!is.na(children)) %>%
  group_by(asylum_region) %>% 
  summarise(children = sum(children), total = sum(total)) %>% 
  mutate(childrenProp = children/total)

t.dem.asyreg.female <- dem_longMissing %>% 
  filter(!is.na(female)) %>%
  group_by(asylum_region) %>% 
  summarise(female = sum(female), total = sum(total)) %>% 
  mutate(femaleProp = female/total)

imputations.asyreg <- imputations %>% 
  group_by(imputation, asylum_region) %>% 
  summarise(children = sum(children), female = sum(female), total = sum(total)) %>% 
  ungroup() %>%
  mutate(childrenProp = children/total,
         femaleProp = female/total) %>% 
  ungroup()

t.imp.asyreg.children <- imputations.asyreg %>% 
  group_by(asylum_region) %>% 
  summarise(childrenMeanProp = mean(childrenProp), 
            lowerUI = quantile(childrenProp, probs = 0.025), 
            upperUI = quantile(childrenProp, probs = 0.975)
            ) %>% 
  left_join(t.dem.asyreg.children %>% select(asylum_region, childrenProp), by = "asylum_region", suffix = c(".imputed", ".availableData"))

t.imp.asyreg.female <- imputations.asyreg %>% 
  group_by(asylum_region) %>% 
  summarise(femaleProp = mean(femaleProp), lowerUI = quantile(femaleProp, probs = 0.025), upperUI = quantile(femaleProp, probs = 0.975)) %>% 
  left_join(t.dem.asyreg.female %>% select(asylum_region, femaleProp), by = "asylum_region", suffix = c(".imputed", ".availableData"))


### world
t.dem.children <- dem_longMissing %>% 
  filter(!is.na(children)) %>%
  summarise(children = sum(children), total = sum(total)) %>% 
  mutate(childrenProp = children/total)

t.dem.female <- dem_longMissing %>% 
  filter(!is.na(female)) %>%
  summarise(female = sum(female), total = sum(total)) %>% 
  mutate(femaleProp = female/total)

t.imp.children <- imputations %>% 
  group_by(imputation) %>% 
  summarise(children = sum(children), female = sum(female), total = sum(total)) %>% 
  mutate(childrenProp = children/total,
         femaleProp = female/total) %>% 
  ungroup() %>%
summarise(childrenMeanProp = mean(childrenProp), 
              lowerUI = quantile(childrenProp, probs = 0.025), 
              upperUI = quantile(childrenProp, probs = 0.975)
    )

t.imp.female <- imputations %>% 
  group_by(imputation) %>% 
  summarise(children = sum(children), female = sum(female), total = sum(total)) %>% 
  mutate(childrenProp = children/total,
         femaleProp = female/total) %>% 
  ungroup() %>%
summarise(femaleMeanProp = mean(femaleProp), 
              lowerUI = quantile(femaleProp, probs = 0.025), 
              upperUI = quantile(femaleProp, probs = 0.975)
    )

```

## Application example
